#---------- generating basic_plan! -----------
(find_table rob_1 table_1 dining)
(walk_table rob_1 table_1 dining)
(find_chair rob_1 chair_1 dining)
(pull_chair rob_1 chair_1 dining)
(walk rob_1 dining kitchen)
(find_burger rob_1 burger_1 kitchen)
(grasp_burger rob_1 burger_1 kitchen)
(find_fork rob_1 fork_1 kitchen)
(find_plate rob_1 plate_2 kitchen)
(place_burger rob_1 burger_1 plate_2 kitchen)
(place_fork rob_1 fork_1 plate_2 kitchen)
(move_plate rob_1 fork_1 burger_1 plate_1 kitchen table_1 dining)
(place_plate rob_1 plate_1 table_1 dining)
; cost = 13 (unit cost)

#---------- generating situation! -----------
situation: the chair is broken.
corresponding predicate: chair_is_broken
object in situation: chair
action that has situation: find_chair
object manipulated by robot: chair

#---------- executing plan! -----------
next action: ['find_table', 'rob_1', 'table_1', 'dining']
next action (decoded): a robot finds a table in dining room.
this action is executed!

next action: ['walk_table', 'rob_1', 'table_1', 'dining']
next action (decoded): a robot walks to a table in dining room.
this action is executed!

next action: ['find_chair', 'rob_1', 'chair_1', 'dining']
next action (decoded): a robot finds a chair in dining room.

#---------- checking unexecuted actions! -----------
['find_chair', 'rob_1', 'chair_1', 'dining']
['pull_chair', 'rob_1', 'chair_1', 'dining']
['walk', 'rob_1', 'dining', 'kitchen']
['find_burger', 'rob_1', 'burger_1', 'kitchen']
['grasp_burger', 'rob_1', 'burger_1', 'kitchen']
['find_fork', 'rob_1', 'fork_1', 'kitchen']
['find_plate', 'rob_1', 'plate_2', 'kitchen']
['place_burger', 'rob_1', 'burger_1', 'plate_2', 'kitchen']
['place_fork', 'rob_1', 'fork_1', 'plate_2', 'kitchen']
['move_plate', 'rob_1', 'fork_1', 'burger_1', 'plate_1', 'kitchen', 'table_1', 'dining']
['place_plate', 'rob_1', 'plate_1', 'table_1', 'dining']

unexecuted action: ['find_chair', 'rob_1', 'chair_1', 'dining']
unexecuted action (decoded): a robot finds a chair in dining room.
! prompt design
raw prompt: is it acceptable that a robot finds a chair in dining room if the chair is broken?
! experience found
! response from LLM
response (raw prompt): ["'no, it is not acceptable for a robot to find a chair in the dining room if the chair is broken'"]
#---------- current plan cannot be executed! -----------

#---------- adding constraint -----------
! step 1: supplement constraint to action precondition
step 1 is done!
! step 2: supplement action's parameter
step 2 is skipped!
! step 3: supplement type
step 3 is skipped!
! step 4: supplement predicates
step 4 is done!
! step 5: supplement init
step 5 is done!
! step 6: supplement object
step 6 is skipped!

#---------- generating modified_plan_1! -----------
(find_table rob_1 table_1 dining)
(walk_table rob_1 table_1 dining)
(find_chair rob_1 chair_2 dining)
(pull_chair rob_1 chair_2 dining)
(walk rob_1 dining kitchen)
(find_burger rob_1 burger_2 kitchen)
(find_fork rob_1 fork_1 kitchen)
(find_fork rob_1 fork_2 kitchen)
(find_plate rob_1 plate_2 kitchen)
(grasp_burger rob_1 burger_2 kitchen)
(place_fork rob_1 fork_2 plate_2 kitchen)
(place_burger rob_1 burger_2 plate_2 kitchen)
(move_plate rob_1 fork_2 burger_2 plate_2 kitchen table_1 dining)
(place_plate rob_1 plate_2 table_1 dining)
; cost = 14 (unit cost)
