#---------- generating basic_plan! -----------
(walk rob_1 dining kitchen)
(find_coke rob_1 coke_1 kitchen)
(grasp_coke rob_1 coke_1 kitchen)
(find_glass rob_1 glass_1 kitchen)
(pour_coke rob_1 coke_1 glass_1 kitchen)
(move_glass rob_1 glass_1 kitchen table_1 dining)
(place_glass rob_1 glass_1 table_1 dining)
; cost = 7 (unit cost)

#---------- generating situation! -----------
situation: the person does not like coke.
corresponding predicate: person_does_not_like_coke
object in situation: person
action that has situation: place_glass
object manipulated by robot: glass

#---------- executing plan! -----------
next action: ['walk', 'rob_1', 'dining', 'kitchen']
next action (decoded): a robot walks from dining room to kitchen room.
this action is executed!

next action: ['find_coke', 'rob_1', 'coke_1', 'kitchen']
next action (decoded): a robot finds a coke in kitchen room.
this action is executed!

next action: ['grasp_coke', 'rob_1', 'coke_1', 'kitchen']
next action (decoded): a robot grasps a coke in kitchen room.
this action is executed!

next action: ['find_glass', 'rob_1', 'glass_1', 'kitchen']
next action (decoded): a robot finds a glass in kitchen room.
this action is executed!

next action: ['pour_coke', 'rob_1', 'coke_1', 'glass_1', 'kitchen']
next action (decoded): a robot pours coke into glass in kitchen room.
this action is executed!

next action: ['move_glass', 'rob_1', 'glass_1', 'kitchen', 'table_1', 'dining']
next action (decoded): a robot moves a glass in kitchen room near a table in table room.
this action is executed!

next action: ['place_glass', 'rob_1', 'glass_1', 'table_1', 'dining']
next action (decoded): a robot places a glass on a table in dining room.

#---------- checking unexecuted actions! -----------
['place_glass', 'rob_1', 'glass_1', 'table_1', 'dining']

unexecuted action: ['place_glass', 'rob_1', 'glass_1', 'table_1', 'dining']
unexecuted action (decoded): a robot places a glass on a table in dining room.
! prompt design
raw prompt: is it acceptable that a robot places a glass on a table in dining room if the person does not like coke?
! response from LLM
response (raw prompt): ['no, it is not acceptable']
#---------- current plan cannot be executed! -----------

#---------- adding constraint -----------
! step 1: supplement constraint to action precondition
step 1 is done!
! step 2: supplement action's parameter
step 2 is done!
! step 3: supplement type
step 3 is done!
! step 4: supplement predicates
step 4 is done!
! step 5: supplement init
step 5 is done!
! step 6: supplement object
step 6 is done!

#---------- generating modified_plan_1! -----------
#---------- no modified_plan_1 found! -----------


#---------- call llm_utensils -----------
#---------- utensil that robot can operate: ----------
 ['place mat', 'mug', 'bucket', 'coffee cup', 'oven tray', 'paper towel', 'chef knife', 'trash can', 'juice', 'cutlery fork', 'water', 'coffee', 'beer', 'dish rack', 'ground coffee', 'wine', 'watermelon', 'colander', 'cutlery knife', 'glass']
#---------- capable_utensils_actionknowledge: ----------
 ['place mat', 'mug', 'bucket', 'coffee cup', 'oven tray', 'paper towel', 'chef knife', 'trash can', 'juice', 'cutlery fork', 'water', 'coffee', 'beer', 'dish rack', 'ground coffee', 'wine', 'watermelon', 'colander', 'cutlery knife', 'glass']

! prompt design
raw prompt: there are some utensils, such as place mat, mug, bucket, coffee cup, oven tray, paper towel, chef knife, trash can, juice, cutlery fork, water, coffee, beer, dish rack, ground coffee, wine, watermelon, colander, cutlery knife, glass. which is the most suitable to replace a person to drink coke if the person does not like coke? if there is no reasonable answer, please output no.
! results from LLM
response (raw prompt): ['the most suitable utensil to replace a person to drink coke if the person does not like coke is a mug']

#---------- most possible utensil: ---------- 
 mug

#---------- add effect -----------
! step 1: supplement object
step 1 is done.
! step 2: supplement init
step 2 is done.
! step 3: change goal
problem_goal_1: ['and (glass_is_filled glass_1) (glass_is_placed glass_1))']
target_object: person
utensil: mug
step 3 is done.

#---------- generating modified_plan_2! -----------
(walk rob_1 dining kitchen)
(find_coke rob_1 coke_1 kitchen)
(grasp_coke rob_1 coke_1 kitchen)
(find_glass rob_1 glass_1 kitchen)
(pour_coke rob_1 coke_1 glass_1 kitchen)
(move_glass rob_1 glass_1 kitchen table_1 dining)
(place_glass rob_1 glass_1 table_1 dining mug_1)
; cost = 7 (unit cost)
