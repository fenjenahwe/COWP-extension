#---------- generating basic_plan! -----------
(walk rob_1 kitchen dining)
(find_table rob_1 table_1 dining)
(takeout_vacuum rob_1 vacuum_1 dining)
(plug_vacuum rob_1 vacuum_1 dining)
(turnon_vacuum rob_1 vacuum_1 dining)
(clean_table rob_1 vacuum_1 table_1 dining)
; cost = 6 (unit cost)

#---------- generating situation! -----------
situation: the vacuum power cord is too short.
corresponding predicate: vacuum_power_cord_too_short
object in situation: power cord
action that has situation: plug_vacuum
object manipulated by robot: vacuum

#---------- executing plan! -----------
next action: ['walk', 'rob_1', 'kitchen', 'dining']
next action (decoded): a robot walks from kitchen room to dining room.
this action is executed!

next action: ['find_table', 'rob_1', 'table_1', 'dining']
next action (decoded): a robot find a table in dining room.
this action is executed!

next action: ['takeout_vacuum', 'rob_1', 'vacuum_1', 'dining']
next action (decoded): a robot takes out a vacuum in dining room.
this action is executed!

next action: ['plug_vacuum', 'rob_1', 'vacuum_1', 'dining']
next action (decoded): a robot plugs a vacuum in dining room.

#---------- checking unexecuted actions! -----------
['plug_vacuum', 'rob_1', 'vacuum_1', 'dining']
['turnon_vacuum', 'rob_1', 'vacuum_1', 'dining']
['clean_table', 'rob_1', 'vacuum_1', 'table_1', 'dining']

unexecuted action: ['plug_vacuum', 'rob_1', 'vacuum_1', 'dining']
unexecuted action (decoded): a robot plugs a vacuum in dining room.
! prompt design
raw prompt: is it acceptable that a robot plugs a vacuum in dining room if the vacuum power cord is too short?
! experience found
! response from LLM
response (raw prompt): ["'no, it is not acceptable for a robot to plug a vacuum in the dining room if the vacuum power cord is too short'"]
#---------- current plan cannot be executed! -----------

#---------- adding constraint -----------
! step 1: supplement constraint to action precondition
step 1 is done!
! step 2: supplement action's parameter
step 2 is done!
! step 3: supplement type
step 3 is done!
! step 4: supplement predicates
step 4 is done!
! step 5: supplement init
step 5 is done!
! step 6: supplement object
step 6 is done!

#---------- generating modified_plan_1! -----------
#---------- no modified_plan_1 found! -----------


#---------- call llm_utensils -----------
#---------- utensil that robot can operate: ----------
 ['cutting board', 'paper towel', 'sponge', 'dish rack', 'wine glass', 'drinking glass', 'wooden spoon', 'cooking pot', 'colander', 'condiment shaker', 'coffee filter', 'rag', 'cutlery fork', 'measuring cup']
#---------- capable_utensils_actionknowledge: ----------
 ['cutting board', 'paper towel', 'sponge', 'dish rack', 'wine glass', 'drinking glass', 'wooden spoon', 'cooking pot', 'colander', 'condiment shaker', 'coffee filter', 'rag', 'cutlery fork', 'measuring cup']

! prompt design
raw prompt: there are some utensils, such as cutting board, paper towel, sponge, dish rack, wine glass, drinking glass, wooden spoon, cooking pot, colander, condiment shaker, coffee filter, rag, cutlery fork, measuring cup. which is the most suitable to replace a power cord to clean floor if the vacuum power cord is too short? if there is no reasonable answer, please output no.
! results from LLM
response (raw prompt): ['the most suitable utensil to replace a power cord to clean floor if the vacuum power cord is too short is a measuring cup']

#---------- most possible utensil: ---------- 
 measuring cup

#---------- add effect -----------
! step 1: supplement object
step 1 is done.
! step 2: supplement init
step 2 is done.
! step 3: change goal
step 3 is done.

#---------- generating modified_plan_2! -----------
(walk rob_1 kitchen dining)
(find_table rob_1 table_1 dining)
(takeout_vacuum rob_1 vacuum_1 dining)
(plug_vacuum rob_1 vacuum_1 dining dish_rack_1)
(turnon_vacuum rob_1 vacuum_1 dining)
(clean_table rob_1 vacuum_1 table_1 dining)
(turnoff_vacuum rob_1 vacuum_1 table_1 dining)
; cost = 7 (unit cost)
