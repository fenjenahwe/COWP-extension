#---------- generating basic_plan! -----------
(walk rob_1 kitchen dining)
(find_table rob_1 table_1 dining)
(takeout_vacuum rob_1 vacuum_1 dining)
(plug_vacuum rob_1 vacuum_1 dining)
(turnon_vacuum rob_1 vacuum_1 dining)
(clean_table rob_1 vacuum_1 table_1 dining)
; cost = 6 (unit cost)

#---------- generating situation! -----------
situation: the vacuum canister is full.
corresponding predicate: vacuum_canister_is_full
object in situation: canister
action that has situation: find_table
object manipulated by robot: table

#---------- executing plan! -----------
next action: ['walk', 'rob_1', 'kitchen', 'dining']
next action (decoded): a robot walks from kitchen room to dining room.
this action is executed!

next action: ['find_table', 'rob_1', 'table_1', 'dining']
next action (decoded): a robot find a table in dining room.

#---------- checking unexecuted actions! -----------
['find_table', 'rob_1', 'table_1', 'dining']
['takeout_vacuum', 'rob_1', 'vacuum_1', 'dining']
['plug_vacuum', 'rob_1', 'vacuum_1', 'dining']
['turnon_vacuum', 'rob_1', 'vacuum_1', 'dining']
['clean_table', 'rob_1', 'vacuum_1', 'table_1', 'dining']

unexecuted action: ['find_table', 'rob_1', 'table_1', 'dining']
unexecuted action (decoded): a robot find a table in dining room.
! prompt design
raw prompt: is it acceptable that a robot find a table in dining room if the vacuum canister is full?
! experience found
! response from LLM
response (raw prompt): ["'no, it is not acceptable for a robot to find a table in the dining room if the vacuum canister is full'"]
#---------- current plan cannot be executed! -----------

#---------- adding constraint -----------
! step 1: supplement constraint to action precondition
step 1 is done!
! step 2: supplement action's parameter
step 2 is done!
! step 3: supplement type
step 3 is done!
! step 4: supplement predicates
step 4 is done!
! step 5: supplement init
step 5 is done!
! step 6: supplement object
step 6 is done!

#---------- generating modified_plan_1! -----------
#---------- no modified_plan_1 found! -----------


#---------- call llm_utensils -----------
#---------- utensil that robot can operate: ----------
 ['condiment bottle', 'dish rack', 'cutting board', 'paper towel', 'condiment shaker', 'cooking pot', 'place mat', 'measuring cup', 'cloth napkin', 'dish bowl', 'wine glass', 'cleaning bottle', 'cutlery fork', 'mug']
#---------- capable_utensils_actionknowledge: ----------
 ['condiment bottle', 'dish rack', 'cutting board', 'paper towel', 'condiment shaker', 'cooking pot', 'place mat', 'measuring cup', 'cloth napkin', 'dish bowl', 'wine glass', 'cleaning bottle', 'cutlery fork', 'mug']

! prompt design
raw prompt: there are some utensils, such as condiment bottle, dish rack, cutting board, paper towel, condiment shaker, cooking pot, place mat, measuring cup, cloth napkin, dish bowl, wine glass, cleaning bottle, cutlery fork, mug. which is the most suitable to replace a canister to clean floor if the vacuum canister is full? if there is no reasonable answer, please output no.
! results from LLM
response (raw prompt): ['the most suitable utensil to replace a canister to clean floor if the vacuum canister is full is the cleaning bottle']

#---------- most possible utensil: ---------- 
 cleaning bottle

#---------- add effect -----------
! step 1: supplement object
step 1 is done.
! step 2: supplement init
step 2 is done.
! step 3: change goal
step 3 is done.

#---------- generating modified_plan_2! -----------
(walk rob_1 kitchen dining)
(find_table rob_1 table_1 dining)
(takeout_vacuum rob_1 vacuum_1 dining)
(plug_vacuum rob_1 vacuum_1 dining dish_rack_1)
(turnon_vacuum rob_1 vacuum_1 dining)
(clean_table rob_1 vacuum_1 table_1 dining)
(turnoff_vacuum rob_1 vacuum_1 table_1 dining)
; cost = 7 (unit cost)
